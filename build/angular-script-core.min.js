!function(i,n){"use strict";n.core=i.module("crip.core",[])}(angular,window.crip||(window.crip={})),function(i,n,t,r){"use strict";function e(){function n(i){return this.filter(function(n){return i.indexOf(n)<0})}function e(i,n){for(var t=this.length-1;t>=0;t--)"undefined"==typeof n?this[t]==i&&this.splice(t,1):this[t][n]==i&&this.splice(t,1)}function c(n){return i.isUndefined(n)||""===n||null===n||n!==n}function o(i){return!c(i)}function u(){var n=arguments;if(0===n.length||c(n[0]))return!1;var t=n[0];for(var r in n)if("0"!==r){if(!t.hasOwnProperty(n[r]))return!1;if(t=t[n[r]],i.isUndefined(t))return!1}return!0}function f(i){return this.replace(/{([^{}]*)}/g,function(n,t){var r=i[t];return"string"==typeof r||"number"==typeof r?r:n})}t.prototype.diff=n,t.prototype.removeItem=e,r.prototype.supplant=f,i.extend(i,{isEmpty:c,hasValue:o,hasProperty:u})}n.core.config(e),e.$inject=[]}(angular,window.crip||(window.crip={}),Array,String),function(i,n){"use strict";function t(n){function t(t){return i.isObject(t)&&t instanceof n.File}function r(i){var n="|"+i.type.slice(i.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(n)}i.extend(i,{isFile:t,isImage:r,fileSupport:!(!n.FileReader||!n.CanvasRenderingContext2D)})}n.core.run(t),t.$inject=["$window"]}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function t(){function i(i,n,t,r){n.bind("keydown keypress",function(n){13===n.which&&(i.$apply(function(){i.$eval(t.cripEnter,{event:n})}),n.preventDefault())}),i.$on("$destroy",function(){n.off(t.cFocus)})}return{restrict:"A",link:i}}n.core.directive("cripEnter",t),t.$inject=[]}(angular,window.crip||(window.crip={})),function(i){"use strict";function n(i){function n(n,t,r,e){t.on(r.cripFocus,function(){i(r.cripSelector)}),n.$on("$destroy",function(){t.off(r.cripFocus)})}return{restrict:"A",link:n}}i.core.directive("cripFocus",n),n.$inject=["focus"]}(window.crip||(window.crip={})),function(i,n){"use strict";function t(){function n(n,t,r){function e(i){var n=new Image;n.onload=c,n.src=i.target.result}function c(){var i=o.width||this.width/this.height*o.height,n=o.height||this.height/this.width*o.width;u.attr({width:i,height:n}),u[0].getContext("2d").drawImage(this,0,0,i,n)}if(i.fileSupport){var o=n.$eval(r.cripThumb);if(!i.isFile(o.file)||!i.isImage(o.file))return void t.hide();var u=t.find("canvas"),f=new FileReader;f.onload=e,f.readAsDataURL(o.file)}}return{restrict:"A",template:"<canvas/>",link:n}}n.core.directive("cripThumb",t)}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function t(n){return function(t){n(function(){var n=i(t);1===n.length&&n.focus()})}}n.core.factory("focus",t),t.$inject=["$timeout"]}(jQuery,window.crip||(window.crip={})),function(i,n){"use strict";function t(){var i="-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";this.changeChars=function(n){i=n},this["new"]=function(t){t|=16;for(var r="",e=0;t>e;e++)r+=i.charAt(n.floor(n.random()*i.length));return r}}i.core.service("cripStrRandom",t),t.$inject=[]}(window.crip||(window.crip={}),Math);
//# sourceMappingURL=data:application/json;base64,
