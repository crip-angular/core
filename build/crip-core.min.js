!function(i,t){"use strict";t.core=i.module("crip.core",[])}(angular,window.crip||(window.crip={})),function(i,t,n,e,r){"use strict";function o(){function t(i){return this.filter(function(t){return i.indexOf(t)<0})}function o(i,t){for(var n=this.length-1;n>=0;n--)"undefined"==typeof t?this[n]==i&&this.splice(n,1):this[n][t]==i&&this.splice(n,1)}function c(t){return i.isUndefined(t)||""===t||null===t||t!==t}function u(i){return!c(i)}function s(){var t=arguments;if(0===t.length||c(t[0]))return!1;var n=t[0];for(var e in t)if("0"!==e){if(!n.hasOwnProperty(t[e]))return!1;if(n=n[t[e]],i.isUndefined(n))return!1}return!0}function f(i){return this.replace(/{([^{}]*)}/g,function(t,n){var e=i[n];return"string"==typeof e||"number"==typeof e?e:t})}function a(){return this.value=this,this.size=Math.log(this)/Math.log(1e3)|0,this.num=(this/Math.pow(1e3,this.size)).toFixed(2),this.text=this.size?"kMGTPEZY"[--this.size]+"B":"Bytes","{num} {text}".supplant(this)}n.prototype.diff=t,n.prototype.removeItem=o,e.prototype.supplant=f,r.prototype.toBytes=a,i.extend(i,{isEmpty:c,hasValue:u,hasProperty:s})}t.core.config(o),o.$inject=[]}(angular,window.crip||(window.crip={}),Array,String,Number),function(i,t){"use strict";function n(t){function n(n){return i.isObject(n)&&n instanceof t.File}function e(i){var t="|"+i.type.slice(i.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(t)}i.extend(i,{isFile:n,isImage:e,fileSupport:!(!t.FileReader||!t.CanvasRenderingContext2D)})}t.core.run(n),n.$inject=["$window"]}(angular,window.crip||(window.crip={})),function(i,t){"use strict";function n(){function i(i,t,n,e){t.bind("keydown keypress",function(t){13===t.which&&(i.$apply(function(){i.$eval(n.cripEnter,{event:t})}),t.preventDefault())}),i.$on("$destroy",function(){t.off(n.cripEnter)})}return{restrict:"A",link:i}}t.core.directive("cripEnter",n),n.$inject=[]}(angular,window.crip||(window.crip={})),function(i){"use strict";function t(i){function t(t,n,e,r){n.on(e.cripFocus,function(){i(e.cripSelector)}),t.$on("$destroy",function(){n.off(e.cripFocus)})}return{restrict:"A",link:t}}i.core.directive("cripFocus",t),t.$inject=["focus"]}(window.crip||(window.crip={})),function(i,t){"use strict";function n(){function t(t,n,e){function r(i){var t=new Image;t.onload=o,t.src=i.target.result}function o(){var i=c.width||this.width/this.height*c.height,t=c.height||this.height/this.width*c.width;u.attr({width:i,height:t}),u[0].getContext("2d").drawImage(this,0,0,i,t)}if(i.fileSupport){var c=t.$eval(e.cripThumb);if(!i.isFile(c.file)||!i.isImage(c.file))return void n.hide();var u=n.find("canvas"),s=new FileReader;s.onload=r,s.readAsDataURL(c.file)}}return{restrict:"A",template:"<canvas/>",link:t}}t.core.directive("cripThumb",n)}(angular,window.crip||(window.crip={})),function(i,t){"use strict";function n(t){return function(n,e){t(function(){var t=i(n);1===t.length&&("function"==typeof e?t.focus(e):t.focus())})}}t.core.factory("focus",n),n.$inject=["$timeout"]}(jQuery,window.crip||(window.crip={})),function(i,t){"use strict";function n(){var i="-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";this.changeChars=function(t){i=t},this["new"]=function(n){n|=16;for(var e="",r=0;n>r;r++)e+=i.charAt(t.floor(t.random()*i.length));return e}}i.core.service("cripStrRandom",n),n.$inject=[]}(window.crip||(window.crip={}),Math);
//# sourceMappingURL=data:application/json;base64,
