!function(i,n){"use strict";n.core=i.module("crip.core",[])}(angular,window.crip||(window.crip={})),function(i,n,t,e,r,o){"use strict";function c(){function n(i){return this.filter(function(n){return i.indexOf(n)<0})}function c(i,n){if("undefined"==typeof n)return void this.splice(this.indexOf(i)||this.length,1);for(var t=this.length-1;t>=0;t--)this[t][n]==i&&this.splice(t,1)}function u(n){return i.isUndefined(n)||""===n||null===n||n!==n}function f(i){return!u(i)}function s(n,t){var e=arguments;if(0===e.length||u(e[0]))return!1;var r=e[0];for(var o in e)if("0"!==o){if(!r.hasOwnProperty(e[o]))return!1;if(r=r[e[o]],i.isUndefined(r))return!1}return!0}function a(i){return this.replace(/{([^{}]*)}/g,function(n,t){var e=i[t];return"string"==typeof e||"number"==typeof e?e:n})}function p(i){return i=i||(i={}),i.value=this,i.size=o.log(i.value)/o.log(1e3)|0,i.num=(i.value/o.pow(1e3,i.size)).toFixed(2),i.text=i.size?"kMGTPEZY"[--i.size]+"B":"Bytes","{num} {text}".supplant(i)}t.prototype.diff=n,t.prototype.removeItem=c,e.prototype.supplant=a,r.prototype.toBytes=p,i.extend(i,{isEmpty:u,hasValue:f,hasProperty:s})}n.core.config(c),c.$inject=[]}(angular,window.crip||(window.crip={}),Array,String,Number,Math),function(i,n){"use strict";function t(n){function t(t){return i.isObject(t)&&t instanceof n.File}function e(i){var n="|"+i.type.slice(i.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(n)}i.extend(i,{isFile:t,isImage:e,fileSupport:!(!n.FileReader||!n.CanvasRenderingContext2D)})}n.core.run(t),t.$inject=["$window"]}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function t(){function i(i,n,t,e){n.bind("keydown keypress",function(n){13===n.which&&(i.$apply(function(){i.$eval(t.cripEnter,{event:n})}),n.preventDefault())}),i.$on("$destroy",function(){n.off(t.cripEnter)})}return{restrict:"A",link:i}}n.core.directive("cripEnter",t),t.$inject=[]}(angular,window.crip||(window.crip={})),function(i){"use strict";function n(i){function n(n,t,e,r){t.on(e.cripFocus,function(){i(e.cripSelector)}),n.$on("$destroy",function(){t.off(e.cripFocus)})}return{restrict:"A",link:n}}i.core.directive("cripFocus",n),n.$inject=["focus"]}(window.crip||(window.crip={})),function(i,n){"use strict";function t(){function n(n,t,e){function r(i){var n=new Image;n.onload=o,n.src=i.target.result}function o(){var i=c.width||this.width/this.height*c.height,n=c.height||this.height/this.width*c.width;u.attr({width:i,height:n}),u[0].getContext("2d").drawImage(this,0,0,i,n)}if(i.fileSupport){var c=n.$eval(e.cripThumb);if(!i.isFile(c.file)||!i.isImage(c.file))return void t.hide();var u=t.find("canvas"),f=new FileReader;f.onload=r,f.readAsDataURL(c.file)}}return{restrict:"A",template:"<canvas/>",link:n}}n.core.directive("cripThumb",t)}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function t(n){return function(t,e){n(function(){var n=i(t);1===n.length&&("function"==typeof e?n.focus(e):n.focus())})}}n.core.factory("focus",t),t.$inject=["$timeout"]}(jQuery,window.crip||(window.crip={})),function(i,n){"use strict";function t(){var i="-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";this.changeChars=function(n){i=n},this["new"]=function(t){t|=16;for(var e="",r=0;t>r;r++)e+=i.charAt(n.floor(n.random()*i.length));return e}}i.core.service("cripStrRandom",t),t.$inject=[]}(window.crip||(window.crip={}),Math);
//# sourceMappingURL=data:application/json;base64,
