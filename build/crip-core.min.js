!function(t,i){"use strict";i.core=t.module("crip.core",[])}(angular,window.crip||(window.crip={})),function(t){"use strict";function i(t){return this.filter(function(i){return t.indexOf(i)<0})}function n(t,i){if("undefined"==typeof i)return void this.splice(this.indexOf(t)||this.length,1);for(var n=this.length-1;n>=0;n--)this[n][i]==t&&this.splice(n,1)}function e(t){var i=arguments;"undefined"==typeof t&&(i=[void 0,"",null,NaN]);for(var n=0;n<this.length;n++)for(var e=0;e<i.length;e++)this[n]===i[e]&&(this.splice(n,1),n--);return this}t.prototype.diff=i,t.prototype.removeItem=n,t.prototype.clean=e}(Array),function(t,i,n,e,r,o,c){"use strict";function u(){function i(i){return t.isUndefined(i)||""===i||null===i||i!==i}function n(t){return!i(t)}function e(n,e){var r=arguments;if(0===r.length||i(r[0]))return!1;var o=r[0];for(var c in r)if("0"!==c){if(!o.hasOwnProperty(r[c]))return!1;if(o=o[r[c]],t.isUndefined(o))return!1}return!0}t.extend(t,{isEmpty:i,hasValue:n,hasProperty:e})}i.core.config(u),u.$inject=[]}(angular,window.crip||(window.crip={}),Array,String,Number,Math,RegExp),function(t,i){"use strict";function n(i){function n(n){return t.isObject(n)&&n instanceof i.File}function e(t){var i="|"+t.type.slice(t.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(i)}t.extend(t,{isFile:n,isImage:e,isHtml5:!(!File||!FormData),fileSupport:!(!i.FileReader||!i.CanvasRenderingContext2D)})}i.core.run(n),n.$inject=["$window"]}(angular,window.crip||(window.crip={})),function(t){"use strict";function i(t){return t=t||(t={}),t.value=this,t.size=Math.log(t.value)/Math.log(1e3)|0,t.num=(t.value/Math.pow(1e3,t.size)).toFixed(2),t.text=t.size?"kMGTPEZY"[--t.size]+"B":"Bytes","{num} {text}".supplant(t)}t.prototype.toBytes=i}(Number),function(t){"use strict";function i(t){return this.replace(/{([^{}]*)}/g,function(i,n){var e=t[n];return"string"==typeof e||"number"==typeof e?e:i})}function n(t,i){var n=this;return n.replace(new RegExp(t,"g"),i)}t.prototype.supplant=i,t.prototype.replaceAll=n}(String),function(t,i){"use strict";function n(){function t(t,i,n,e){i.bind("keydown keypress",function(i){13===i.which&&(t.$apply(function(){t.$eval(n.cripEnter,{event:i})}),i.preventDefault())}),t.$on("$destroy",function(){i.off(n.cripEnter)})}return{restrict:"A",link:t}}i.core.directive("cripEnter",n),n.$inject=[]}(angular,window.crip||(window.crip={})),function(t){"use strict";function i(t){function i(i,n,e,r){n.on(e.cripFocus,function(){t(e.cripSelector)}),i.$on("$destroy",function(){n.off(e.cripFocus)})}return{restrict:"A",link:i}}t.core.directive("cripFocus",i),i.$inject=["focus"]}(window.crip||(window.crip={})),function(t,i){"use strict";function n(){function i(i,n,e){function r(t){var i=new Image;i.onload=o,i.src=t.target.result}function o(){var t=c.width||this.width/this.height*c.height,i=c.height||this.height/this.width*c.width;u.attr({width:t,height:i}),u[0].getContext("2d").drawImage(this,0,0,t,i)}if(t.fileSupport){var c=i.$eval(e.cripThumb);if(!t.isFile(c.file)||!t.isImage(c.file))return void n.hide();var u=n.find("canvas"),f=new FileReader;f.onload=r,f.readAsDataURL(c.file)}}return{restrict:"A",template:"<canvas/>",link:i}}i.core.directive("cripThumb",n)}(angular,window.crip||(window.crip={})),function(t,i){"use strict";function n(i){return function(n,e){i(function(){var i=t(n);1===i.length&&("function"==typeof e?i.focus(e):i.focus())})}}i.core.factory("focus",n),n.$inject=["$timeout"]}(jQuery,window.crip||(window.crip={})),function(t,i){"use strict";function n(){var t="-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";this.changeChars=function(i){t=i},this["new"]=function(n){n|=16;for(var e="",r=0;n>r;r++)e+=t.charAt(i.floor(i.random()*t.length));return e}}t.core.service("cripStrRandom",n),n.$inject=[]}(window.crip||(window.crip={}),Math);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvY29yZS5tb2R1bGUuanMiLCIvc291cmNlL2FycmF5LmV4dGVuc2lvbnMuanMiLCIvc291cmNlL2NvbmZpZy5qcyIsIi9zb3VyY2UvZmlsZS5leHRlbnNpb25zLmpzIiwiL3NvdXJjZS9udW1iZXIuZXh0ZW5zaW9ucy5qcyIsIi9zb3VyY2Uvc3RyaW5nLmV4dGVuc2lvbnMuanMiLCIvc291cmNlL2RpcmVjdGl2ZXMvY3JpcEVudGVyLmpzIiwiL3NvdXJjZS9kaXJlY3RpdmVzL2NyaXBGb2N1cy5qcyIsIi9zb3VyY2UvZGlyZWN0aXZlcy9jcmlwVGh1bWIuanMiLCIvc291cmNlL2ZhY3Rvcmllcy9mb2N1cy5qcyIsIi9zb3VyY2Uvc2VydmljZXMvY3JpcFN0clJhbmRvbS5qcyJdLCJuYW1lcyI6WyJuZyIsImNyaXAiLCJjb3JlIiwibW9kdWxlIiwiYW5ndWxhciIsIndpbmRvdyIsIkFycmF5IiwiZGlmZiIsImEiLCJ0aGlzIiwiZmlsdGVyIiwiaSIsImluZGV4T2YiLCJyZW1vdmVJdGVtIiwidmFsIiwia2V5Iiwic3BsaWNlIiwibGVuZ3RoIiwiY2xlYW4iLCJkZWxldGVfdmFsdWUiLCJjbGVhbl9mcm9tIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiTmFOIiwiaiIsInByb3RvdHlwZSIsIlN0cmluZyIsIk51bWJlciIsIk1hdGgiLCJSZWdFeHAiLCJDb3JlQ29uZmlnIiwiaXNFbXB0eSIsInZhbHVlIiwiaXNVbmRlZmluZWQiLCJoYXNWYWx1ZSIsImhhc1Byb3BlcnR5Iiwib2JqZWN0IiwicHJvcGVydGllcyIsInRhcmdldCIsImFyZyIsImhhc093blByb3BlcnR5IiwiZXh0ZW5kIiwiY29uZmlnIiwiJGluamVjdCIsIkZpbGVFeHRlbnNpb25zIiwiJHdpbmRvdyIsImlzRmlsZSIsIml0ZW0iLCJpc09iamVjdCIsIkZpbGUiLCJpc0ltYWdlIiwiZmlsZSIsInR5cGUiLCJzbGljZSIsImxhc3RJbmRleE9mIiwiaXNIdG1sNSIsIkZvcm1EYXRhIiwiZmlsZVN1cHBvcnQiLCJGaWxlUmVhZGVyIiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwicnVuIiwidG9CeXRlcyIsImhvbGRlciIsInNpemUiLCJsb2ciLCJudW0iLCJwb3ciLCJ0b0ZpeGVkIiwidGV4dCIsInN1cHBsYW50IiwibyIsInJlcGxhY2UiLCJiIiwiciIsInJlcGxhY2VBbGwiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImNyaXBFbnRlciIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsImN0cmwiLCJiaW5kIiwiZXZlbnQiLCJ3aGljaCIsIiRhcHBseSIsIiRldmFsIiwicHJldmVudERlZmF1bHQiLCIkb24iLCJvZmYiLCJyZXN0cmljdCIsImRpcmVjdGl2ZSIsImNyaXBGb2N1cyIsImZvY3VzIiwib24iLCJjcmlwU2VsZWN0b3IiLCJjcmlwVGh1bWIiLCJvbkxvYWRGaWxlIiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbkxvYWRJbWFnZSIsInNyYyIsInJlc3VsdCIsIndpZHRoIiwicGFyYW1zIiwiaGVpZ2h0IiwiY2FudmFzIiwiYXR0ciIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJoaWRlIiwiZmluZCIsInJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJ0ZW1wbGF0ZSIsIiQiLCIkdGltZW91dCIsInNlbGVjdG9yIiwiY2FsbGJhY2siLCIkZWxlbWVudCIsImZhY3RvcnkiLCJqUXVlcnkiLCJjcmlwU3RyUmFuZG9tIiwicG9zc2libGUiLCJjaGFuZ2VDaGFycyIsImNoYXJzIiwiY2hhckF0IiwiZmxvb3IiLCJyYW5kb20iLCJzZXJ2aWNlIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLFlBRUFBLEdBQUFDLEtBQUFGLEVBQUFHLE9BQUEsaUJBRUFDLFFBQUFDLE9BQUFKLE9BQUFJLE9BQUFKLFVDTEEsU0FBQUssR0FDQSxZQVlBLFNBQUFDLEdBQUFDLEdBQ0EsTUFBQUMsTUFBQUMsT0FBQSxTQUFBQyxHQUNBLE1BQUFILEdBQUFJLFFBQUFELEdBQUEsSUFVQSxRQUFBRSxHQUFBQyxFQUFBQyxHQUNBLEdBQUEsbUJBQUFBLEdBRUEsV0FEQU4sTUFBQU8sT0FBQVAsS0FBQUcsUUFBQUUsSUFBQUwsS0FBQVEsT0FBQSxFQUlBLEtBQUEsR0FBQU4sR0FBQUYsS0FBQVEsT0FBQSxFQUFBTixHQUFBLEVBQUFBLElBQ0FGLEtBQUFFLEdBQUFJLElBQUFELEdBQ0FMLEtBQUFPLE9BQUFMLEVBQUEsR0FXQSxRQUFBTyxHQUFBQyxHQUNBLEdBQUFDLEdBQUFDLFNBQ0Esb0JBQUFGLEtBQ0FDLEdBQUFFLE9BQUEsR0FBQSxLQUFBQyxLQUdBLEtBQUEsR0FBQVosR0FBQSxFQUFBQSxFQUFBRixLQUFBUSxPQUFBTixJQUNBLElBQUEsR0FBQWEsR0FBQSxFQUFBQSxFQUFBSixFQUFBSCxPQUFBTyxJQUNBZixLQUFBRSxLQUFBUyxFQUFBSSxLQUNBZixLQUFBTyxPQUFBTCxFQUFBLEdBQ0FBLElBS0EsT0FBQUYsTUF4REFILEVBQUFtQixVQUFBbEIsS0FBQUEsRUFDQUQsRUFBQW1CLFVBQUFaLFdBQUFBLEVBQ0FQLEVBQUFtQixVQUFBUCxNQUFBQSxHQXlEQVosT0M5REEsU0FBQU4sRUFBQUMsRUFBQUssRUFBQW9CLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsWUFPQSxTQUFBQyxLQWNBLFFBQUFDLEdBQUFDLEdBQ0EsTUFBQWhDLEdBQUFpQyxZQUFBRCxJQUFBLEtBQUFBLEdBQUEsT0FBQUEsR0FBQUEsSUFBQUEsRUFTQSxRQUFBRSxHQUFBRixHQUNBLE9BQUFELEVBQUFDLEdBVUEsUUFBQUcsR0FBQUMsRUFBQUMsR0FDQSxHQUFBN0IsR0FBQWEsU0FFQSxJQUFBLElBQUFiLEVBQUFTLFFBQUFjLEVBQUF2QixFQUFBLElBQ0EsT0FBQSxDQUVBLElBQUE4QixHQUFBOUIsRUFBQSxFQUNBLEtBQUEsR0FBQStCLEtBQUEvQixHQUNBLEdBQUEsTUFBQStCLEVBQUEsQ0FHQSxJQUFBRCxFQUFBRSxlQUFBaEMsRUFBQStCLElBQ0EsT0FBQSxDQUdBLElBREFELEVBQUFBLEVBQUE5QixFQUFBK0IsSUFDQXZDLEVBQUFpQyxZQUFBSyxHQUNBLE9BQUEsRUFHQSxPQUFBLEVBcERBdEMsRUFBQXlDLE9BQUF6QyxHQUNBK0IsUUFBQUEsRUFDQUcsU0FBQUEsRUFDQUMsWUFBQUEsSUFWQWxDLEVBQUFDLEtBQ0F3QyxPQUFBWixHQUVBQSxFQUFBYSxZQTJEQXZDLFFBQUFDLE9BQUFKLE9BQUFJLE9BQUFKLFNBQUFLLE1BQUFvQixPQUFBQyxPQUFBQyxLQUFBQyxRQ2pFQSxTQUFBN0IsRUFBQUMsR0FDQSxZQU9BLFNBQUEyQyxHQUFBQyxHQWVBLFFBQUFDLEdBQUFDLEdBQ0EsTUFBQS9DLEdBQUFnRCxTQUFBRCxJQUFBQSxZQUFBRixHQUFBSSxLQVNBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQSxJQUFBRCxFQUFBQyxLQUFBQyxNQUFBRixFQUFBQyxLQUFBRSxZQUFBLEtBQUEsR0FBQSxHQUNBLE9BQUEsS0FBQSx5QkFBQTFDLFFBQUF3QyxHQXpCQXBELEVBQUF5QyxPQUFBekMsR0FDQThDLE9BQUFBLEVBQ0FJLFFBQUFBLEVBQ0FLLFdBQUFOLE9BQUFPLFVBQ0FDLGVBQUFaLEVBQUFhLGFBQUFiLEVBQUFjLDRCQVhBMUQsRUFBQUMsS0FDQTBELElBQUFoQixHQUVBQSxFQUFBRCxTQUFBLFlBZ0NBdkMsUUFBQUMsT0FBQUosT0FBQUksT0FBQUosVUN0Q0EsU0FBQTBCLEdBQ0EsWUFVQSxTQUFBa0MsR0FBQUMsR0FPQSxNQU5BQSxHQUFBQSxJQUFBQSxNQUNBQSxFQUFBOUIsTUFBQXZCLEtBQ0FxRCxFQUFBQyxLQUFBbkMsS0FBQW9DLElBQUFGLEVBQUE5QixPQUFBSixLQUFBb0MsSUFBQSxLQUFBLEVBQ0FGLEVBQUFHLEtBQUFILEVBQUE5QixNQUFBSixLQUFBc0MsSUFBQSxJQUFBSixFQUFBQyxPQUFBSSxRQUFBLEdBQ0FMLEVBQUFNLEtBQUFOLEVBQUFDLEtBQUEsYUFBQUQsRUFBQUMsTUFBQSxJQUFBLFFBRUEsZUFBQU0sU0FBQVAsR0FmQW5DLEVBQUFGLFVBQUFvQyxRQUFBQSxHQWlCQWxDLFFDcEJBLFNBQUFELEdBQ0EsWUFXQSxTQUFBMkMsR0FBQUMsR0FDQSxNQUFBN0QsTUFBQThELFFBQUEsY0FDQSxTQUFBL0QsRUFBQWdFLEdBQ0EsR0FBQUMsR0FBQUgsRUFBQUUsRUFDQSxPQUFBLGdCQUFBQyxJQUFBLGdCQUFBQSxHQUFBQSxFQUFBakUsSUFZQSxRQUFBa0UsR0FBQUMsRUFBQUMsR0FDQSxHQUFBdEMsR0FBQTdCLElBQ0EsT0FBQTZCLEdBQUFpQyxRQUFBLEdBQUExQyxRQUFBOEMsRUFBQSxLQUFBQyxHQTNCQWxELEVBQUFELFVBQUE0QyxTQUFBQSxFQUNBM0MsRUFBQUQsVUFBQWlELFdBQUFBLEdBNkJBaEQsUUNqQ0EsU0FBQTFCLEVBQUFDLEdBQ0EsWUFPQSxTQUFBNEUsS0FNQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBRixFQUFBRyxLQUFBLG1CQUFBLFNBQUFDLEdBQ0EsS0FBQUEsRUFBQUMsUUFDQU4sRUFBQU8sT0FBQSxXQUNBUCxFQUFBUSxNQUFBTixFQUFBSixXQUFBTyxNQUFBQSxNQUdBQSxFQUFBSSxvQkFNQVQsRUFBQVUsSUFBQSxXQUFBLFdBQ0FULEVBQUFVLElBQUFULEVBQUFKLGFBbkJBLE9BQ0FjLFNBQUEsSUFDQWIsS0FBQUEsR0FSQTdFLEVBQUFDLEtBQ0EwRixVQUFBLFlBQUFmLEdBRUFBLEVBQUFsQyxZQTBCQXZDLFFBQUFDLE9BQUFKLE9BQUFJLE9BQUFKLFVDaENBLFNBQUFBLEdBQ0EsWUFPQSxTQUFBNEYsR0FBQUMsR0FNQSxRQUFBaEIsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQWUsR0FBQWQsRUFBQVksVUFBQSxXQUNBQyxFQUFBYixFQUFBZSxnQkFLQWpCLEVBQUFVLElBQUEsV0FBQSxXQUNBVCxFQUFBVSxJQUFBVCxFQUFBWSxhQWJBLE9BQ0FGLFNBQUEsSUFDQWIsS0FBQUEsR0FSQTdFLEVBQUFDLEtBQ0EwRixVQUFBLFlBQUFDLEdBRUFBLEVBQUFsRCxTQUFBLFVBb0JBdEMsT0FBQUosT0FBQUksT0FBQUosVUMxQkEsU0FBQUQsRUFBQUMsR0FDQSxZQUtBLFNBQUFnRyxLQU9BLFFBQUFuQixHQUFBQyxFQUFBQyxFQUFBQyxHQWdCQSxRQUFBaUIsR0FBQWQsR0FDQSxHQUFBZSxHQUFBLEdBQUFDLE1BQ0FELEdBQUFFLE9BQUFDLEVBQ0FILEVBQUFJLElBQUFuQixFQUFBOUMsT0FBQWtFLE9BR0EsUUFBQUYsS0FDQSxHQUFBRyxHQUFBQyxFQUFBRCxPQUFBaEcsS0FBQWdHLE1BQUFoRyxLQUFBa0csT0FBQUQsRUFBQUMsT0FDQUEsRUFBQUQsRUFBQUMsUUFBQWxHLEtBQUFrRyxPQUFBbEcsS0FBQWdHLE1BQUFDLEVBQUFELEtBQ0FHLEdBQUFDLE1BQUFKLE1BQUFBLEVBQUFFLE9BQUFBLElBQ0FDLEVBQUEsR0FBQUUsV0FBQSxNQUFBQyxVQUFBdEcsS0FBQSxFQUFBLEVBQUFnRyxFQUFBRSxHQXpCQSxHQUFBM0csRUFBQXlELFlBQUEsQ0FFQSxHQUFBaUQsR0FBQTNCLEVBQUFRLE1BQUFOLEVBQUFnQixVQUVBLEtBQUFqRyxFQUFBOEMsT0FBQTRELEVBQUF2RCxRQUFBbkQsRUFBQWtELFFBQUF3RCxFQUFBdkQsTUFFQSxXQURBNkIsR0FBQWdDLE1BSUEsSUFBQUosR0FBQTVCLEVBQUFpQyxLQUFBLFVBQ0FDLEVBQUEsR0FBQXhELFdBRUF3RCxHQUFBYixPQUFBSCxFQUNBZ0IsRUFBQUMsY0FBQVQsRUFBQXZELE9BcEJBLE9BQ0F3QyxTQUFBLElBQ0F5QixTQUFBLFlBQ0F0QyxLQUFBQSxHQVBBN0UsRUFBQUMsS0FDQTBGLFVBQUEsWUFBQUssSUF3Q0E3RixRQUFBQyxPQUFBSixPQUFBSSxPQUFBSixVQzVDQSxTQUFBb0gsRUFBQXBILEdBQ0EsWUFPQSxTQUFBNkYsR0FBQXdCLEdBQ0EsTUFBQSxVQUFBQyxFQUFBQyxHQUtBRixFQUFBLFdBQ0EsR0FBQUcsR0FBQUosRUFBQUUsRUFDQSxLQUFBRSxFQUFBeEcsU0FDQSxrQkFBQXVHLEdBQ0FDLEVBQUEzQixNQUFBMEIsR0FFQUMsRUFBQTNCLFlBakJBN0YsRUFBQUMsS0FDQXdILFFBQUEsUUFBQTVCLEdBRUFBLEVBQUFuRCxTQUFBLGFBbUJBZ0YsT0FBQXRILE9BQUFKLE9BQUFJLE9BQUFKLFVDekJBLFNBQUFBLEVBQUEyQixHQUNBLFlBT0EsU0FBQWdHLEtBQ0EsR0FBQUMsR0FBQSxvRUFFQXBILE1BQUFxSCxZQUFBLFNBQUFDLEdBQ0FGLEVBQUFFLEdBR0F0SCxLQUFBQSxPQUFBLFNBQUFRLEdBQ0FBLEdBQUEsRUFFQSxLQUFBLEdBREF1RixHQUFBLEdBQ0E3RixFQUFBLEVBQUFNLEVBQUFOLEVBQUFBLElBQ0E2RixHQUFBcUIsRUFBQUcsT0FBQXBHLEVBQUFxRyxNQUFBckcsRUFBQXNHLFNBQUFMLEVBQUE1RyxRQUdBLE9BQUF1RixJQW5CQXZHLEVBQUFDLEtBQ0FpSSxRQUFBLGdCQUFBUCxHQUVBQSxFQUFBakYsWUFtQkF0QyxPQUFBSixPQUFBSSxPQUFBSixTQUFBMkIiLCJmaWxlIjoiY3JpcC1jb3JlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAobmcsIGNyaXApIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmUgPSBuZy5tb2R1bGUoJ2NyaXAuY29yZScsIFtdKTtcclxuXHJcbn0pKGFuZ3VsYXIsIHdpbmRvdy5jcmlwIHx8ICh3aW5kb3cuY3JpcCA9IHt9KSk7IiwiKGZ1bmN0aW9uIChBcnJheSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIEFycmF5LnByb3RvdHlwZS5kaWZmID0gZGlmZjtcclxuICAgIEFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gcmVtb3ZlSXRlbTtcclxuICAgIEFycmF5LnByb3RvdHlwZS5jbGVhbiA9IGNsZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGRpZmZlcmVudCBlbGVtZW50cyBmcm9tIEFycmF5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gYVxyXG4gICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBkaWZmKGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEuaW5kZXhPZihpKSA8IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgaXRlbSBmcm9tIEFycmF5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVtb3ZlSXRlbSh2YWwsIGtleSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKCh0aGlzLmluZGV4T2YodmFsKSB8fCB0aGlzLmxlbmd0aCksIDEpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAodGhpc1tpXVtrZXldID09IHZhbClcclxuICAgICAgICAgICAgICAgIHRoaXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFuIGFycmF5IGZyb20gZW1wdHkgdmFsdWVzXHJcbiAgICAgKiBJZiBwYXJhbWV0ZXJzIHByZXNlbnRlZCwgZGVsZXRlIGl0ZW1zIHdpdGNoIGNvbnRhaW5zIHBhc3NlZCB2YWx1ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Li4uVH0gW2RlbGV0ZV92YWx1ZV1cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY2xlYW4oZGVsZXRlX3ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNsZWFuX2Zyb20gPSBhcmd1bWVudHM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZWxldGVfdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGNsZWFuX2Zyb20gPSBbdW5kZWZpbmVkLCAnJywgbnVsbCwgTmFOXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNsZWFuX2Zyb20ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBjbGVhbl9mcm9tW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbn0pKEFycmF5KTsiLCIoZnVuY3Rpb24gKG5nLCBjcmlwLCBBcnJheSwgU3RyaW5nLCBOdW1iZXIsIE1hdGgsIFJlZ0V4cCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGNyaXAuY29yZVxyXG4gICAgICAgIC5jb25maWcoQ29yZUNvbmZpZyk7XHJcblxyXG4gICAgQ29yZUNvbmZpZy4kaW5qZWN0ID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gQ29yZUNvbmZpZygpIHtcclxuXHJcbiAgICAgICAgbmcuZXh0ZW5kKG5nLCB7XHJcbiAgICAgICAgICAgIGlzRW1wdHk6IGlzRW1wdHksXHJcbiAgICAgICAgICAgIGhhc1ZhbHVlOiBoYXNWYWx1ZSxcclxuICAgICAgICAgICAgaGFzUHJvcGVydHk6IGhhc1Byb3BlcnR5XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERldGVybWluZXMgaXMgdmFsdWUgZW1wdHlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5nLmlzVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyBpcyB2YWx1ZSBpbiBvYmplY3RcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNFbXB0eSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlzIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgY2hhaW5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0gey4uLnN0cmluZ30gcHJvcGVydGllc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iamVjdCwgcHJvcGVydGllcykge1xyXG4gICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCA9PT0gMCB8fCBpc0VtcHR5KGFbMF0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGFbMF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGFyZyBpbiBhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJnID09PSAnMCcpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuaGFzT3duUHJvcGVydHkoYVthcmddKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0W2FbYXJnXV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmcuaXNVbmRlZmluZWQodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoYW5ndWxhciwgd2luZG93LmNyaXAgfHwgKHdpbmRvdy5jcmlwID0ge30pLCBBcnJheSwgU3RyaW5nLCBOdW1iZXIsIE1hdGgsIFJlZ0V4cCk7IiwiKGZ1bmN0aW9uKG5nLCBjcmlwKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmVcclxuICAgICAgICAucnVuKEZpbGVFeHRlbnNpb25zKTtcclxuXHJcbiAgICBGaWxlRXh0ZW5zaW9ucy4kaW5qZWN0ID0gWyckd2luZG93J107XHJcblxyXG4gICAgZnVuY3Rpb24gRmlsZUV4dGVuc2lvbnMoJHdpbmRvdykge1xyXG5cclxuICAgICAgICBuZy5leHRlbmQobmcsIHtcclxuICAgICAgICAgICAgaXNGaWxlOiBpc0ZpbGUsXHJcbiAgICAgICAgICAgIGlzSW1hZ2U6IGlzSW1hZ2UsXHJcbiAgICAgICAgICAgIGlzSHRtbDU6ICEhKEZpbGUgJiYgRm9ybURhdGEpLFxyXG4gICAgICAgICAgICBmaWxlU3VwcG9ydDogISEoJHdpbmRvdy5GaWxlUmVhZGVyICYmICR3aW5kb3cuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlzIGl0ZW0gYW4gaW5zdGFuY2Ugb2YgRmlsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBpdGVtXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gaXNGaWxlKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5nLmlzT2JqZWN0KGl0ZW0pICYmIGl0ZW0gaW5zdGFuY2VvZiAkd2luZG93LkZpbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlzIGZpbGUgYW4gdHlwZSBvZiBpbWFnZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gaXNJbWFnZShmaWxlKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gJ3wnICsgZmlsZS50eXBlLnNsaWNlKGZpbGUudHlwZS5sYXN0SW5kZXhPZignLycpICsgMSkgKyAnfCc7XHJcbiAgICAgICAgICAgIHJldHVybiAnfGpwZ3xwbmd8anBlZ3xibXB8Z2lmfCcuaW5kZXhPZih0eXBlKSAhPT0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCB8fCAod2luZG93LmNyaXAgPSB7fSkpOyIsIihmdW5jdGlvbihOdW1iZXIpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIE51bWJlci5wcm90b3R5cGUudG9CeXRlcyA9IHRvQnl0ZXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0IE51bWJlciB0byB1c2VyIGZyaWVuZGx5IGJ5dGUgc3RyaW5nXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtob2xkZXJdXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB0b0J5dGVzKGhvbGRlcikge1xyXG4gICAgICAgIGhvbGRlciA9IGhvbGRlciB8fCAoaG9sZGVyID0ge30pO1xyXG4gICAgICAgIGhvbGRlci52YWx1ZSA9IHRoaXM7XHJcbiAgICAgICAgaG9sZGVyLnNpemUgPSBNYXRoLmxvZyhob2xkZXIudmFsdWUpIC8gTWF0aC5sb2coMWUzKSB8IDA7XHJcbiAgICAgICAgaG9sZGVyLm51bSA9IChob2xkZXIudmFsdWUgLyBNYXRoLnBvdygxZTMsIGhvbGRlci5zaXplKSkudG9GaXhlZCgyKTtcclxuICAgICAgICBob2xkZXIudGV4dCA9IChob2xkZXIuc2l6ZSA/ICgna01HVFBFWlknWy0taG9sZGVyLnNpemVdICsgJ0InKSA6ICdCeXRlcycpO1xyXG5cclxuICAgICAgICByZXR1cm4gJ3tudW19IHt0ZXh0fScuc3VwcGxhbnQoaG9sZGVyKTtcclxuICAgIH1cclxufSkoTnVtYmVyKTsiLCIoZnVuY3Rpb24gKFN0cmluZykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIFN0cmluZy5wcm90b3R5cGUuc3VwcGxhbnQgPSBzdXBwbGFudDtcclxuICAgIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IHJlcGxhY2VBbGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNpbXBsZSB0ZW1wbGF0aW5nIG1ldGhvZCBmb3IgcmVwbGFjaW5nIHBsYWNlaG9sZGVycyBlbmNsb3NlZCBpbiBjdXJseSBicmFjZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHN1cHBsYW50KG8pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC97KFtee31dKil9L2csXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IG9bYl07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHIgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByID09PSAnbnVtYmVyJyA/IHIgOiBhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlcGxhY2UgYWxsIG9jY3VycmVuY2VzIGluIHN0cmluZ1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hWYWx1ZSBVc2VkIGluIFJlZ0V4cFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHJlcGxhY2VWYWx1ZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5yZXBsYWNlKG5ldyBSZWdFeHAoc2VhcmNoVmFsdWUsICdnJyksIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG59KShTdHJpbmcpOyIsIihmdW5jdGlvbiAobmcsIGNyaXApIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmVcclxuICAgICAgICAuZGlyZWN0aXZlKCdjcmlwRW50ZXInLCBjcmlwRW50ZXIpO1xyXG5cclxuICAgIGNyaXBFbnRlci4kaW5qZWN0ID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gY3JpcEVudGVyKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGxpbmtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJrZXlkb3duIGtleXByZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLmNyaXBFbnRlciwgeydldmVudCc6IGV2ZW50fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlcyBib3VuZCBldmVudHMgaW4gdGhlIGVsZW1lbnQgaXRzZWxmXHJcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIHNjb3BlIGlzIGRlc3Ryb3llZFxyXG4gICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vZmYoYXR0cnMuY3JpcEVudGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCB8fCAod2luZG93LmNyaXAgPSB7fSkpO1xyXG4iLCIoZnVuY3Rpb24gKGNyaXApIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmVcclxuICAgICAgICAuZGlyZWN0aXZlKCdjcmlwRm9jdXMnLCBjcmlwRm9jdXMpO1xyXG5cclxuICAgIGNyaXBGb2N1cy4kaW5qZWN0ID0gWydmb2N1cyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyaXBGb2N1cyhmb2N1cykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGxpbmtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xyXG4gICAgICAgICAgICBlbGVtZW50Lm9uKGF0dHJzLmNyaXBGb2N1cywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZm9jdXMoYXR0cnMuY3JpcFNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmVzIGJvdW5kIGV2ZW50cyBpbiB0aGUgZWxlbWVudCBpdHNlbGZcclxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkXHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZihhdHRycy5jcmlwRm9jdXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKHdpbmRvdy5jcmlwIHx8ICh3aW5kb3cuY3JpcCA9IHt9KSk7IiwiKGZ1bmN0aW9uIChuZywgY3JpcCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGNyaXAuY29yZVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ2NyaXBUaHVtYicsIGNyaXBUaHVtYik7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JpcFRodW1iKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGNhbnZhcy8+JyxcclxuICAgICAgICAgICAgbGluazogbGlua1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcclxuICAgICAgICAgICAgaWYoIW5nLmZpbGVTdXBwb3J0KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gc2NvcGUuJGV2YWwoYXR0cnMuY3JpcFRodW1iKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghbmcuaXNGaWxlKHBhcmFtcy5maWxlKSB8fCAhbmcuaXNJbWFnZShwYXJhbXMuZmlsZSkpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZWxlbWVudC5maW5kKCdjYW52YXMnKTtcclxuICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gb25Mb2FkRmlsZTtcclxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwocGFyYW1zLmZpbGUpO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gb25Mb2FkRmlsZShldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IG9uTG9hZEltYWdlO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uTG9hZEltYWdlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcGFyYW1zLndpZHRoIHx8IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCAqIHBhcmFtcy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyYW1zLmhlaWdodCB8fCB0aGlzLmhlaWdodCAvIHRoaXMud2lkdGggKiBwYXJhbXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjYW52YXMuYXR0cih7d2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodH0pO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzWzBdLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKHRoaXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoYW5ndWxhciwgd2luZG93LmNyaXAgfHwgKHdpbmRvdy5jcmlwID0ge30pKTsiLCIoZnVuY3Rpb24gKCQsIGNyaXApIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmVcclxuICAgICAgICAuZmFjdG9yeSgnZm9jdXMnLCBmb2N1cyk7XHJcblxyXG4gICAgZm9jdXMuJGluamVjdCA9IFsnJHRpbWVvdXQnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBmb2N1cygkdGltZW91dCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZWN0b3IsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgbWFrZXMgc3VyZSB0aGF0IGl0IGlzIGludm9rZWQgYWZ0ZXIgYW55IG90aGVyIGV2ZW50IGhhcyBiZWVuIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgLy8gZS5nLiBjbGljayBldmVudHMgdGhhdCBuZWVkIHRvIHJ1biBiZWZvcmUgdGhlIGZvY3VzIG9yXHJcbiAgICAgICAgICAgIC8vIGlucHV0cyBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGRpc2FibGVkIHN0YXRlIGJ1dCBhcmUgZW5hYmxlZCB3aGVuIHRob3NlIGV2ZW50c1xyXG4gICAgICAgICAgICAvLyBhcmUgdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGlmICgkZWxlbWVudC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5mb2N1cyhjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKGpRdWVyeSwgd2luZG93LmNyaXAgfHwgKHdpbmRvdy5jcmlwID0ge30pKTsiLCIoZnVuY3Rpb24gKGNyaXAsIE1hdGgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLmNvcmVcclxuICAgICAgICAuc2VydmljZSgnY3JpcFN0clJhbmRvbScsIGNyaXBTdHJSYW5kb20pO1xyXG5cclxuICAgIGNyaXBTdHJSYW5kb20uJGluamVjdCA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyaXBTdHJSYW5kb20oKSB7XHJcbiAgICAgICAgdmFyIHBvc3NpYmxlID0gJy1fQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlfLSc7XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbmdlQ2hhcnMgPSBmdW5jdGlvbiAoY2hhcnMpIHtcclxuICAgICAgICAgICAgcG9zc2libGUgPSBjaGFycztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm5ldyA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcclxuICAgICAgICAgICAgbGVuZ3RoIHw9IDE2O1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSkod2luZG93LmNyaXAgfHwgKHdpbmRvdy5jcmlwID0ge30pLCBNYXRoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
