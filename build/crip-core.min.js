!function(t,n){"use strict";n.core=t.module("crip.core",[])}(angular,window.crip||(window.crip={})),function(t){"use strict";function n(t){return this.filter(function(n){return t.indexOf(n)<0})}function i(t,n){if("undefined"==typeof n)return void this.splice(this.indexOf(t)||this.length,1);for(var i=this.length-1;i>=0;i--)this[i][n]==t&&this.splice(i,1)}function e(t){var n=arguments;"undefined"==typeof t&&(n=[void 0,"",null,NaN]);for(var i=0;i<this.length;i++)for(var e=0;e<n.length;e++)this[i]===n[e]&&(this.splice(i,1),i--);return this}t.prototype.diff=n,t.prototype.removeItem=i,t.prototype.clean=e}(Array),function(t,n,i,e,r,o,c){"use strict";function u(){function n(n){return t.isUndefined(n)||""===n||null===n||n!==n}function i(t){return!n(t)}function e(i,e){var r=arguments;if(0===r.length||n(r[0]))return!1;var o=r[0];for(var c in r)if("0"!==c){if(!o.hasOwnProperty(r[c]))return!1;if(o=o[r[c]],t.isUndefined(o))return!1}return!0}t.extend(t,{isEmpty:n,hasValue:i,hasProperty:e})}n.core.config(u),u.$inject=[]}(angular,window.crip||(window.crip={}),Array,String,Number,Math,RegExp),function(t,n){"use strict";function i(n){function i(i){return t.isObject(i)&&i instanceof n.File}function e(t){var n="|"+t.type.slice(t.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(n)}t.extend(t,{isFile:i,isImage:e,isHtml5:!(!File||!FormData),fileSupport:!(!n.FileReader||!n.CanvasRenderingContext2D)})}n.core.run(i),i.$inject=["$window"]}(angular,window.crip||(window.crip={})),function(t){"use strict";function n(t){return t=t||(t={}),t.value=this,t.size=Math.log(t.value)/Math.log(1e3)|0,t.num=(t.value/Math.pow(1e3,t.size)).toFixed(2),t.text=t.size?"kMGTPEZY"[--t.size]+"B":"Bytes","{num} {text}".supplant(t)}t.prototype.toBytes=n}(Number),function(t){"use strict";function n(t){return this.replace(/{([^{}]*)}/g,function(n,i){var e=t[i];return"string"==typeof e||"number"==typeof e?e:n})}function i(t,n){var i=this;return i.replace(new RegExp(t,"g"),n)}t.prototype.supplant=n,t.prototype.replaceAll=i}(String),function(t,n){"use strict";function i(t){function n(n,i,e,r){var o=t(e.cripContextmenu);i.bind("contextmenu",function(t){n.$apply(function(){t.preventDefault(),o(n,{$event:t,$element:i})})}),n.$on("$destroy",function(){i.off(e.cripContextmenu)})}return{restrict:"A",link:n}}n.core.directive("cripContextmenu",i),i.$inject=["$parse"]}(angular,window.crip||(window.crip={})),function(t,n){"use strict";function i(){function t(t,n,i,e){n.bind("keydown keypress",function(n){13===n.which&&(t.$apply(function(){t.$eval(i.cripEnter,{event:n})}),n.preventDefault())}),t.$on("$destroy",function(){n.off(i.cripEnter)})}return{restrict:"A",link:t}}n.core.directive("cripEnter",i),i.$inject=[]}(angular,window.crip||(window.crip={})),function(t){"use strict";function n(t){function n(n,i,e,r){i.on(e.cripFocus,function(){t(e.cripSelector)}),n.$on("$destroy",function(){i.off(e.cripFocus)})}return{restrict:"A",link:n}}t.core.directive("cripFocus",n),n.$inject=["focus"]}(window.crip||(window.crip={})),function(t,n){"use strict";function i(){function n(n,i,e){function r(t){var n=new Image;n.onload=o,n.src=t.target.result}function o(){var t=c.width||this.width/this.height*c.height,n=c.height||this.height/this.width*c.width;u.attr({width:t,height:n}),u[0].getContext("2d").drawImage(this,0,0,t,n)}if(t.fileSupport){var c=n.$eval(e.cripThumb);if(!t.isFile(c.file)||!t.isImage(c.file))return void i.hide();var u=i.find("canvas"),f=new FileReader;f.onload=r,f.readAsDataURL(c.file)}}return{restrict:"A",template:"<canvas/>",link:n}}n.core.directive("cripThumb",i)}(angular,window.crip||(window.crip={})),function(t,n){"use strict";function i(n){return function(i,e){n(function(){var n=t(i);1===n.length&&("function"==typeof e?n.focus(e):n.focus())})}}n.core.factory("focus",i),i.$inject=["$timeout"]}(jQuery,window.crip||(window.crip={})),function(t,n){"use strict";function i(){var t="-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";this.changeChars=function(n){t=n},this["new"]=function(i){i|=16;for(var e="",r=0;i>r;r++)e+=t.charAt(n.floor(n.random()*t.length));return e}}t.core.service("cripStrRandom",i),i.$inject=[]}(window.crip||(window.crip={}),Math);
//# sourceMappingURL=data:application/json;base64,
